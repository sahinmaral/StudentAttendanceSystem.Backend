// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StudentAttendanceSystem.DataAccess.Concrete;

#nullable disable

namespace StudentAttendanceSystem.DataAccess.Migrations
{
    [DbContext(typeof(StudentAttendanceSystemAppDbContext))]
    [Migration("20221203152526_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DepartmentLecture", b =>
                {
                    b.Property<Guid>("DepartmentsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LecturesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DepartmentsId", "LecturesId");

                    b.HasIndex("LecturesId");

                    b.ToTable("DepartmentLecture");
                });

            modelBuilder.Entity("LectureLectureHour", b =>
                {
                    b.Property<Guid>("LectureHoursId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LecturesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LectureHoursId", "LecturesId");

                    b.HasIndex("LecturesId");

                    b.ToTable("LectureLectureHour");
                });

            modelBuilder.Entity("StudentAttendanceSystem.Entities.Concrete.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FacultyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FacultyId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("StudentAttendanceSystem.Entities.Concrete.Faculty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Faculties");
                });

            modelBuilder.Entity("StudentAttendanceSystem.Entities.Concrete.Lecture", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Lectures");
                });

            modelBuilder.Entity("StudentAttendanceSystem.Entities.Concrete.LectureHour", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EndHour")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StartHour")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LectureHours");
                });

            modelBuilder.Entity("StudentAttendanceSystem.Entities.Concrete.LectureInstructor", b =>
                {
                    b.Property<Guid>("GivenLectureId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("InstructorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GivenLectureId", "InstructorId");

                    b.HasIndex("InstructorId");

                    b.ToTable("LectureInstructor");
                });

            modelBuilder.Entity("StudentAttendanceSystem.Entities.Concrete.LectureStudent", b =>
                {
                    b.Property<Guid>("TakenLectureId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LectureId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TakenLectureId", "StudentId");

                    b.HasIndex("LectureId");

                    b.ToTable("LectureStudent");
                });

            modelBuilder.Entity("StudentAttendanceSystem.Entities.Concrete.StudentAttendance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LectureEnteredDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LectureId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("LectureId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentAttendances");
                });

            modelBuilder.Entity("StudentAttendanceSystem.Entities.Concrete.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");
                });

            modelBuilder.Entity("StudentAttendanceSystem.Entities.Concrete.UserAddress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<short>("ZipCode")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserAddresses");
                });

            modelBuilder.Entity("StudentAttendanceSystem.Entities.Concrete.Instructor", b =>
                {
                    b.HasBaseType("StudentAttendanceSystem.Entities.Concrete.User");

                    b.HasDiscriminator().HasValue("Instructor");
                });

            modelBuilder.Entity("StudentAttendanceSystem.Entities.Concrete.Student", b =>
                {
                    b.HasBaseType("StudentAttendanceSystem.Entities.Concrete.User");

                    b.HasDiscriminator().HasValue("Student");
                });

            modelBuilder.Entity("DepartmentLecture", b =>
                {
                    b.HasOne("StudentAttendanceSystem.Entities.Concrete.Department", null)
                        .WithMany()
                        .HasForeignKey("DepartmentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentAttendanceSystem.Entities.Concrete.Lecture", null)
                        .WithMany()
                        .HasForeignKey("LecturesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LectureLectureHour", b =>
                {
                    b.HasOne("StudentAttendanceSystem.Entities.Concrete.LectureHour", null)
                        .WithMany()
                        .HasForeignKey("LectureHoursId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentAttendanceSystem.Entities.Concrete.Lecture", null)
                        .WithMany()
                        .HasForeignKey("LecturesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StudentAttendanceSystem.Entities.Concrete.Department", b =>
                {
                    b.HasOne("StudentAttendanceSystem.Entities.Concrete.Faculty", "Faculty")
                        .WithMany("Departments")
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Faculty");
                });

            modelBuilder.Entity("StudentAttendanceSystem.Entities.Concrete.LectureInstructor", b =>
                {
                    b.HasOne("StudentAttendanceSystem.Entities.Concrete.Lecture", "Lecture")
                        .WithMany("LectureInstructors")
                        .HasForeignKey("GivenLectureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentAttendanceSystem.Entities.Concrete.Instructor", "Instructor")
                        .WithMany("LectureInstructors")
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Instructor");

                    b.Navigation("Lecture");
                });

            modelBuilder.Entity("StudentAttendanceSystem.Entities.Concrete.LectureStudent", b =>
                {
                    b.HasOne("StudentAttendanceSystem.Entities.Concrete.Lecture", "Lecture")
                        .WithMany("LectureStudents")
                        .HasForeignKey("LectureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentAttendanceSystem.Entities.Concrete.Student", "Student")
                        .WithMany("LectureStudents")
                        .HasForeignKey("TakenLectureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lecture");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("StudentAttendanceSystem.Entities.Concrete.StudentAttendance", b =>
                {
                    b.HasOne("StudentAttendanceSystem.Entities.Concrete.Lecture", "Lecture")
                        .WithMany()
                        .HasForeignKey("LectureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentAttendanceSystem.Entities.Concrete.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lecture");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("StudentAttendanceSystem.Entities.Concrete.UserAddress", b =>
                {
                    b.HasOne("StudentAttendanceSystem.Entities.Concrete.User", "User")
                        .WithMany("UserAddresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("StudentAttendanceSystem.Entities.Concrete.Faculty", b =>
                {
                    b.Navigation("Departments");
                });

            modelBuilder.Entity("StudentAttendanceSystem.Entities.Concrete.Lecture", b =>
                {
                    b.Navigation("LectureInstructors");

                    b.Navigation("LectureStudents");
                });

            modelBuilder.Entity("StudentAttendanceSystem.Entities.Concrete.User", b =>
                {
                    b.Navigation("UserAddresses");
                });

            modelBuilder.Entity("StudentAttendanceSystem.Entities.Concrete.Instructor", b =>
                {
                    b.Navigation("LectureInstructors");
                });

            modelBuilder.Entity("StudentAttendanceSystem.Entities.Concrete.Student", b =>
                {
                    b.Navigation("LectureStudents");
                });
#pragma warning restore 612, 618
        }
    }
}
